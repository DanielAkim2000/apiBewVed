# Utiliser le contrôleur frontal comme fichier index. Cela sert de solution de secours lorsque
# toute autre réécriture/redirection échoue (par exemple, dans un environnement avec des alias sans
# mod_rewrite). De plus, cela réduit le processus de correspondance pour la
# page de démarrage (chemin "/") car sinon Apache appliquera les règles de réécriture
# à chaque fichier DirectoryIndex configuré (par exemple index.php, index.html, index.pl).
DirectoryIndex index.php

# Par défaut, Apache n'évalue pas les liens symboliques si vous n'avez pas activé cette
# fonctionnalité dans votre configuration de serveur. Décommentez la ligne suivante si vous
# installez des assets comme liens symboliques ou si vous rencontrez des problèmes liés aux liens symboliques
# lors de la compilation des assets LESS/Sass/CoffeScript.
# Options +FollowSymlinks

# Désactiver MultiViews empêche les négociations indésirables, par exemple "/index" ne doit pas résoudre
# au contrôleur frontal "/index.php" mais être réécrit en "/index.php/index".
<IfModule mod_negotiation.c>
    Options -MultiViews
</IfModule>

# Forcer les requêtes HTTP à HTTPS
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{HTTPS} !=on
    RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
</IfModule>

<IfModule mod_rewrite.c>
    Options +FollowSymlinks

    RewriteEngine On

    # Déterminer automatiquement le RewriteBase et le définir comme variable d'environnement.
    # Si vous utilisez des alias Apache pour l'hébergement virtuel massif ou si vous installez le
    # projet dans un sous-répertoire, le chemin de base sera préfixé pour permettre une résolution correcte du fichier index.php et pour rediriger vers l'URI correcte. Cela fonctionnera
    # dans des environnements sans préfixe de chemin également, fournissant une solution unique, sûre et universelle. Mais comme vous n'en avez pas besoin dans ce cas, vous pouvez commenter
    # les 2 lignes suivantes pour éliminer la surcharge.
    RewriteCond %{REQUEST_URI}::$0 ^(/.+)/(.*)::\2$
    RewriteRule .* - [E=BASE:%1]

    # Définir l'en-tête HTTP_AUTHORIZATION supprimé par Apache
    RewriteCond %{HTTP:Authorization} .+
    RewriteRule ^ - [E=HTTP_AUTHORIZATION:%0]

    # Rediriger vers l'URI sans contrôleur frontal pour éviter le contenu dupliqué
    # (avec et sans `/index.php`). Ne faire cette redirection que lors de la réécriture initiale
    # par Apache et non lors des cycles suivants. Sinon, nous aurions une boucle de redirection sans fin (requête -> réécriture vers contrôleur frontal -> redirection -> requête -> ...).
    # Donc en cas d'erreur "too many redirects" ou si vous êtes toujours redirigé
    # vers la page de démarrage car votre Apache n'expose pas la variable d'environnement REDIRECT_STATUS,
    # vous avez 2 choix :
    # - désactiver cette fonctionnalité en commentant les 2 lignes suivantes ou
    # - utiliser Apache >= 2.3.9 et remplacer tous les drapeaux L par des drapeaux END et supprimer
    #   la RewriteCond suivante (meilleure solution)
    RewriteCond %{ENV:REDIRECT_STATUS} =""
    RewriteRule ^index\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]

    # Si le nom de fichier demandé existe, le servir simplement.
    # Nous voulons seulement laisser Apache servir les fichiers et non les répertoires.
    # Réécrire toutes les autres requêtes vers le contrôleur frontal.
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ %{ENV:BASE}/index.php [L]
</IfModule>

<IfModule !mod_rewrite.c>
    <IfModule mod_alias.c>
        # Lorsque mod_rewrite n'est pas disponible, nous instruisons une redirection temporaire de
        # la page de démarrage vers le contrôleur frontal explicitement afin que le site web
        # et les liens générés puissent encore être utilisés.
        RedirectMatch 307 ^/$ /index.php/
        # RedirectTemp ne peut pas être utilisé à la place
    </IfModule>
</IfModule>
